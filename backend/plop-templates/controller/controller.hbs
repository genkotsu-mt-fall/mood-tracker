import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Param,
  Body,
  Query,
  UsePipes,
  ValidationPipe,
  ParseUUIDPipe,
  UseGuards,
  Request,
} from '@nestjs/common';
import { JwtAuthGuard } from 'src/auth/guard/jwt-auth.guard';
import { Create{{pascalCase name}}Dto } from '../dto/create_{{kebabCase name}}.dto';
import { Update{{pascalCase name}}Dto } from '../dto/update_{{kebabCase name}}.dto';
import { Create{{pascalCase name}}UseCase } from '../use-case/create-{{kebabCase name}}.use-case';
import { FindAll{{pascalCase name}}sUseCase } from '../use-case/find-all-{{kebabCase name}}s.use-case';
import { Find{{pascalCase name}}ByIdUseCase } from '../use-case/find-{{kebabCase name}}-by-id.use-case';
import { Update{{pascalCase name}}UseCase } from '../use-case/update-{{kebabCase name}}.use-case';
import { Delete{{pascalCase name}}UseCase } from '../use-case/delete-{{kebabCase name}}.use-case';
import { {{pascalCase name}}ResponseDto } from '../dto/{{kebabCase name}}_response.dto';
import { PaginationQueryDto } from 'src/common/dto/pagination-query.dto';
import { PaginatedResponseDto } from 'src/common/response/paginated-response.dto';

@Controller('{{kebabCase name}}')
export class {{pascalCase name}}Controller {
  constructor(
    private readonly create{{pascalCase name}}UseCase: Create{{pascalCase name}}UseCase,
    private readonly findAll{{pascalCase name}}UseCase: FindAll{{pascalCase name}}sUseCase,
    private readonly find{{pascalCase name}}ByIdUseCase: Find{{pascalCase name}}ByIdUseCase,
    private readonly update{{pascalCase name}}UseCase: Update{{pascalCase name}}UseCase,
    private readonly delete{{pascalCase name}}UseCase: Delete{{pascalCase name}}UseCase,
  ) {}

  @UseGuards(JwtAuthGuard)
  @Post()
  async create(
    @Request() req: { user: { id: string } },
    @Body() dto: Create{{pascalCase name}}Dto,
  ): Promise<{{pascalCase name}}ResponseDto> {
    const result = await this.create{{pascalCase name}}UseCase.execute(req.user.id, dto);
    return new {{pascalCase name}}ResponseDto(result);
  }

  @Get()
  @UsePipes(new ValidationPipe({ transform: true }))
  async findAll(
    @Query() query: PaginationQueryDto,
  ): Promise<PaginatedResponseDto<{{pascalCase name}}ResponseDto>> {
    const { page, limit } = query;
    const result = await this.findAll{{pascalCase name}}UseCase.execute({ page, limit });

    return new PaginatedResponseDto<{{pascalCase name}}ResponseDto>({
      data: result.data.map((item) => new {{pascalCase name}}ResponseDto(item)),
      total: result.total,
      page: result.page,
      limit: result.limit,
      hasNextPage: result.hasNextPage,
    });
  }

  @Get(':id')
  async findOne(
    @Param('id', new ParseUUIDPipe({ version: '4' })) id: string,
  ): Promise<{{pascalCase name}}ResponseDto> {
    const result = await this.find{{pascalCase name}}ByIdUseCase.execute(id);
    return new {{pascalCase name}}ResponseDto(result);
  }

  @Put(':id')
  async update(
    @Param('id', new ParseUUIDPipe({ version: '4' })) id: string,
    @Body() dto: Update{{pascalCase name}}Dto,
  ): Promise<{{pascalCase name}}ResponseDto> {
    const result = await this.update{{pascalCase name}}UseCase.execute(id, dto);
    return new {{pascalCase name}}ResponseDto(result);
  }

  @Delete(':id')
  async remove(
    @Param('id', new ParseUUIDPipe({ version: '4' })) id: string,
  ): Promise<{ message: string }> {
    await this.delete{{pascalCase name}}UseCase.execute(id);
    return { message: '{{pascalCase name}} deleted successfully' };
  }
}
