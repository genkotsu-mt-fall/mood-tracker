// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid()) @db.Uuid
  email          String  @unique
  name           String?
  hashedPassword String
  posts          Post[]

  /// このユーザがフォローしている他のユーザとの関係
  /// await prisma.user.findUnique({
  ///   where: { id: userId },
  ///   include: {
  ///     following: {
  ///       include: { followee: true } //フォロワー側のユーザ情報を取得
  ///     }
  ///   }
  ///})
  following Follow[] @relation("UserFollowing")

  /// このユーザをフォローしている他のユーザとの関係
  /// await prisma.user.findUnique({
  ///   where: { id: userId },
  ///   include: {
  ///     followers: {
  ///       include: { follower: true } //フォロー先のユーザ情報を取得
  ///     }
  ///   }
  ///})
  followers Follow[] @relation("UserFollowers")

  groups       Group[]
  groupMembers GroupMember[]
}

model Follow {
  id String @id @default(uuid()) @db.Uuid

  /// フォローする側のユーザID（自分）
  follower_id String @db.Uuid
  follower    User   @relation("UserFollowing", fields: [follower_id], references: [id])

  /// フォローされる側のユーザID（相手）
  followee_id String @db.Uuid
  followee    User   @relation("UserFollowers", fields: [followee_id], references: [id])

  /// フォローした日時
  followed_at DateTime @default(now())

  @@unique([follower_id, followee_id])
}

model Group {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  created_at DateTime @default(now())

  /// グループを作成したユーザのID(=グループの所有者)
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  /// このグループに所属しているユーザたち（GroupMember 経由）
  members GroupMember[]
}

model GroupMember {
  id String @id @default(uuid()) @db.Uuid

  /// メンバーがこのグループに追加された日時
  added_at DateTime @default(now())

  /// 所属しているグループのID
  group_id String @db.Uuid
  group    Group  @relation(fields: [group_id], references: [id])

  /// 所属しているユーザのID（＝メンバーID）
  member_id String @db.Uuid
  member    User   @relation(fields: [member_id], references: [id])

  @@unique([group_id, member_id])
}

model Post {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  /// 気分を表すキーワード（例: "happy", "sad" など）
  mood String?

  /// 気分の強さ（1〜10 などの数値スコア）
  intensity Int?

  /// 投稿本文
  body String

  /// 気分に対応する絵文字（例: 😊）
  emoji String?

  /// 使用された投稿テンプレートのID
  templateId String? @db.Uuid

  /// 公開設定情報（フォロワー限定・ブロックリストなど）をJSON形式で保持
  privacyJson Json?

  /// フォロワー限定かどうかのフラグ
  followersOnly Boolean

  /// 相互フォロワー限定かどうかのフラグ
  followBackOnly Boolean

  /// 投稿閲覧に必要な最小フォロー日数
  minFollowDays Int?

  /// 投稿が表示される終了日時（指定があれば時限公開）
  visibleUntil DateTime?

  /// 投稿が表示される開始日時（予約投稿機能）
  visibleAfter DateTime?

  /// 緊急フラグ（自傷等の兆候があるなど注意を要する場合にtrue）
  crisisFlag Boolean

  /// 投稿作成日時（デフォルト: 現在時刻）
  createdAt DateTime @default(now())

  /// 投稿更新日時
  updatedAt DateTime @updatedAt
}
